// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import client "github.com/micro/go-micro/client"
import context "context"
import grpc "github.com/paysuper/paysuper-billing-server/pkg/proto/grpc"
import mock "github.com/stretchr/testify/mock"

// BillingService is an autogenerated mock type for the BillingService type
type BillingService struct {
	mock.Mock
}

// AutoAcceptRoyaltyReports provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AutoAcceptRoyaltyReports(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalcAnnualTurnovers provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CalcAnnualTurnovers(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelRedeemKeyForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CancelRedeemKeyForOrder(ctx context.Context, in *grpc.KeyForOrderRequest, opts ...client.CallOption) (*grpc.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.KeyForOrderRequest, ...client.CallOption) *grpc.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.KeyForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeCodeInOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeCodeInOrder(ctx context.Context, in *grpc.ChangeCodeInOrderRequest, opts ...client.CallOption) (*grpc.ChangeCodeInOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeCodeInOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ChangeCodeInOrderRequest, ...client.CallOption) *grpc.ChangeCodeInOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeCodeInOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ChangeCodeInOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchant(ctx context.Context, in *grpc.OnboardingRequest, opts ...client.CallOption) (*grpc.ChangeMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.OnboardingRequest, ...client.CallOption) *grpc.ChangeMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.OnboardingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantData provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantData(ctx context.Context, in *grpc.ChangeMerchantDataRequest, opts ...client.CallOption) (*grpc.ChangeMerchantDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeMerchantDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ChangeMerchantDataRequest, ...client.CallOption) *grpc.ChangeMerchantDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeMerchantDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ChangeMerchantDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantPaymentMethod(ctx context.Context, in *grpc.MerchantPaymentMethodRequest, opts ...client.CallOption) (*grpc.MerchantPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MerchantPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.MerchantPaymentMethodRequest, ...client.CallOption) *grpc.MerchantPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MerchantPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.MerchantPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantStatus provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantStatus(ctx context.Context, in *grpc.MerchantChangeStatusRequest, opts ...client.CallOption) (*grpc.ChangeMerchantStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeMerchantStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.MerchantChangeStatusRequest, ...client.CallOption) *grpc.ChangeMerchantStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeMerchantStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.MerchantChangeStatusRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*grpc.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Project, ...client.CallOption) *grpc.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Project, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeRoyaltyReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeRoyaltyReport(ctx context.Context, in *grpc.ChangeRoyaltyReportRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ChangeRoyaltyReportRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ChangeRoyaltyReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckProjectRequestSignature provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CheckProjectRequestSignature(ctx context.Context, in *grpc.CheckProjectRequestSignatureRequest, opts ...client.CallOption) (*grpc.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CheckProjectRequestSignatureRequest, ...client.CallOption) *grpc.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CheckProjectRequestSignatureRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmUserEmail provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ConfirmUserEmail(ctx context.Context, in *grpc.ConfirmUserEmailRequest, opts ...client.CallOption) (*grpc.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ConfirmUserEmailRequest, ...client.CallOption) *grpc.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ConfirmUserEmailRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountingEntry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateAccountingEntry(ctx context.Context, in *grpc.CreateAccountingEntryRequest, opts ...client.CallOption) (*grpc.CreateAccountingEntryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateAccountingEntryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CreateAccountingEntryRequest, ...client.CallOption) *grpc.CreateAccountingEntryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateAccountingEntryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CreateAccountingEntryRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotification provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateNotification(ctx context.Context, in *grpc.NotificationRequest, opts ...client.CallOption) (*grpc.CreateNotificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateNotificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.NotificationRequest, ...client.CallOption) *grpc.CreateNotificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateNotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdateKeyProduct(ctx context.Context, in *grpc.CreateOrUpdateKeyProductRequest, opts ...client.CallOption) (*grpc.KeyProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.KeyProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CreateOrUpdateKeyProductRequest, ...client.CallOption) *grpc.KeyProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.KeyProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CreateOrUpdateKeyProductRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethod(ctx context.Context, in *billing.PaymentMethod, opts ...client.CallOption) (*grpc.ChangePaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentMethod, ...client.CallOption) *grpc.ChangePaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentMethod, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethodProductionSettings(ctx context.Context, in *grpc.ChangePaymentMethodParamsRequest, opts ...client.CallOption) (*grpc.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ChangePaymentMethodParamsRequest, ...client.CallOption) *grpc.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ChangePaymentMethodParamsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethodTestSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethodTestSettings(ctx context.Context, in *grpc.ChangePaymentMethodParamsRequest, opts ...client.CallOption) (*grpc.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ChangePaymentMethodParamsRequest, ...client.CallOption) *grpc.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ChangePaymentMethodParamsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdateProduct(ctx context.Context, in *grpc.Product, opts ...client.CallOption) (*grpc.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.Product
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.Product, ...client.CallOption) *grpc.Product); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.Product, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdateUserProfile(ctx context.Context, in *grpc.UserProfile, opts ...client.CallOption) (*grpc.GetUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.UserProfile, ...client.CallOption) *grpc.GetUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.UserProfile, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePageReview provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreatePageReview(ctx context.Context, in *grpc.CreatePageReviewRequest, opts ...client.CallOption) (*grpc.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CreatePageReviewRequest, ...client.CallOption) *grpc.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CreatePageReviewRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefund provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateRefund(ctx context.Context, in *grpc.CreateRefundRequest, opts ...client.CallOption) (*grpc.CreateRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateRefundResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CreateRefundRequest, ...client.CallOption) *grpc.CreateRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateRefundResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CreateRefundRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoyaltyReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateRoyaltyReport(ctx context.Context, in *grpc.CreateRoyaltyReportRequest, opts ...client.CallOption) (*grpc.CreateRoyaltyReportRequest, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateRoyaltyReportRequest
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CreateRoyaltyReportRequest, ...client.CallOption) *grpc.CreateRoyaltyReportRequest); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateRoyaltyReportRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CreateRoyaltyReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateToken(ctx context.Context, in *grpc.TokenRequest, opts ...client.CallOption) (*grpc.TokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.TokenRequest, ...client.CallOption) *grpc.TokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.TokenRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteKeyProduct(ctx context.Context, in *grpc.RequestKeyProductMerchant, opts ...client.CallOption) (*grpc.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RequestKeyProductMerchant, ...client.CallOption) *grpc.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RequestKeyProductMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteMoneyBackCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteMoneyBackCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentChannelCostSystem(ctx context.Context, in *billing.PaymentCostDeleteRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentCostDeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentMethodProductionSettings(ctx context.Context, in *grpc.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*grpc.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) *grpc.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethodTestSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentMethodTestSettings(ctx context.Context, in *grpc.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*grpc.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) *grpc.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlatformFromProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePlatformFromProduct(ctx context.Context, in *grpc.RemovePlatformRequest, opts ...client.CallOption) (*grpc.EmptyResponseWithStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponseWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RemovePlatformRequest, ...client.CallOption) *grpc.EmptyResponseWithStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponseWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RemovePlatformRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteProduct(ctx context.Context, in *grpc.RequestProduct, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteProject(ctx context.Context, in *grpc.GetProjectRequest, opts ...client.CallOption) (*grpc.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) *grpc.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllOrdersPrivate provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindAllOrdersPrivate(ctx context.Context, in *grpc.ListOrdersRequest, opts ...client.CallOption) (*grpc.ListOrdersPrivateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListOrdersPrivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListOrdersRequest, ...client.CallOption) *grpc.ListOrdersPrivateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListOrdersPrivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllOrdersPublic provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindAllOrdersPublic(ctx context.Context, in *grpc.ListOrdersRequest, opts ...client.CallOption) (*grpc.ListOrdersPublicResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListOrdersPublicResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListOrdersRequest, ...client.CallOption) *grpc.ListOrdersPublicResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListOrdersPublicResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByZipCode provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindByZipCode(ctx context.Context, in *grpc.FindByZipCodeRequest, opts ...client.CallOption) (*grpc.FindByZipCodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.FindByZipCodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.FindByZipCodeRequest, ...client.CallOption) *grpc.FindByZipCodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.FindByZipCodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.FindByZipCodeRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishRedeemKeyForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FinishRedeemKeyForOrder(ctx context.Context, in *grpc.KeyForOrderRequest, opts ...client.CallOption) (*grpc.GetKeyForOrderRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetKeyForOrderRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.KeyForOrderRequest, ...client.CallOption) *grpc.GetKeyForOrderRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetKeyForOrderRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.KeyForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantListRequest, opts ...client.CallOption) (*grpc.MoneyBackCostMerchantListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MoneyBackCostMerchantListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.MoneyBackCostMerchantListRequest, ...client.CallOption) *grpc.MoneyBackCostMerchantListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MoneyBackCostMerchantListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.MoneyBackCostMerchantListRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllMoneyBackCostSystem(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*grpc.MoneyBackCostSystemListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MoneyBackCostSystemListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *grpc.MoneyBackCostSystemListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MoneyBackCostSystemListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantListRequest, opts ...client.CallOption) (*grpc.PaymentChannelCostMerchantListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentChannelCostMerchantListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentChannelCostMerchantListRequest, ...client.CallOption) *grpc.PaymentChannelCostMerchantListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentChannelCostMerchantListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentChannelCostMerchantListRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAllPaymentChannelCostSystem(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*grpc.PaymentChannelCostSystemListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentChannelCostSystemListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *grpc.PaymentChannelCostSystemListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentChannelCostSystemListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableKeysCount provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetAvailableKeysCount(ctx context.Context, in *grpc.GetPlatformKeyCountRequest, opts ...client.CallOption) (*grpc.GetPlatformKeyCountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetPlatformKeyCountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetPlatformKeyCountRequest, ...client.CallOption) *grpc.GetPlatformKeyCountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetPlatformKeyCountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetPlatformKeyCountRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountriesList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCountriesList(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*billing.CountriesList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.CountriesList
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *billing.CountriesList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CountriesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCountry(ctx context.Context, in *billing.GetCountryRequest, opts ...client.CallOption) (*billing.Country, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Country
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetCountryRequest, ...client.CallOption) *billing.Country); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetCountryRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardBaseReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardBaseReport(ctx context.Context, in *grpc.GetDashboardBaseReportRequest, opts ...client.CallOption) (*grpc.GetDashboardBaseReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetDashboardBaseReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetDashboardBaseReportRequest, ...client.CallOption) *grpc.GetDashboardBaseReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetDashboardBaseReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetDashboardBaseReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardMainReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardMainReport(ctx context.Context, in *grpc.GetDashboardMainRequest, opts ...client.CallOption) (*grpc.GetDashboardMainResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetDashboardMainResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetDashboardMainRequest, ...client.CallOption) *grpc.GetDashboardMainResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetDashboardMainResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetDashboardMainRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardRevenueDynamicsReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetDashboardRevenueDynamicsReport(ctx context.Context, in *grpc.GetDashboardMainRequest, opts ...client.CallOption) (*grpc.GetDashboardRevenueDynamicsReportResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetDashboardRevenueDynamicsReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetDashboardMainRequest, ...client.CallOption) *grpc.GetDashboardRevenueDynamicsReportResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetDashboardRevenueDynamicsReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetDashboardMainRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyByID provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyByID(ctx context.Context, in *grpc.KeyForOrderRequest, opts ...client.CallOption) (*grpc.GetKeyForOrderRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetKeyForOrderRequestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.KeyForOrderRequest, ...client.CallOption) *grpc.GetKeyForOrderRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetKeyForOrderRequestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.KeyForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProduct(ctx context.Context, in *grpc.RequestKeyProductMerchant, opts ...client.CallOption) (*grpc.KeyProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.KeyProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RequestKeyProductMerchant, ...client.CallOption) *grpc.KeyProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.KeyProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RequestKeyProductMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProductInfo provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProductInfo(ctx context.Context, in *grpc.GetKeyProductInfoRequest, opts ...client.CallOption) (*grpc.GetKeyProductInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetKeyProductInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetKeyProductInfoRequest, ...client.CallOption) *grpc.GetKeyProductInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetKeyProductInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetKeyProductInfoRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProducts provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProducts(ctx context.Context, in *grpc.ListKeyProductsRequest, opts ...client.CallOption) (*grpc.ListKeyProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListKeyProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListKeyProductsRequest, ...client.CallOption) *grpc.ListKeyProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListKeyProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListKeyProductsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyProductsForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetKeyProductsForOrder(ctx context.Context, in *grpc.GetKeyProductsForOrderRequest, opts ...client.CallOption) (*grpc.ListKeyProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListKeyProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetKeyProductsForOrderRequest, ...client.CallOption) *grpc.ListKeyProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListKeyProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetKeyProductsForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantAgreementSignUrl provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantAgreementSignUrl(ctx context.Context, in *grpc.GetMerchantAgreementSignUrlRequest, opts ...client.CallOption) (*grpc.GetMerchantAgreementSignUrlResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetMerchantAgreementSignUrlResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetMerchantAgreementSignUrlRequest, ...client.CallOption) *grpc.GetMerchantAgreementSignUrlResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetMerchantAgreementSignUrlResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetMerchantAgreementSignUrlRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantBy provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantBy(ctx context.Context, in *grpc.GetMerchantByRequest, opts ...client.CallOption) (*grpc.GetMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetMerchantByRequest, ...client.CallOption) *grpc.GetMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetMerchantByRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantOnboardingCompleteData provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantOnboardingCompleteData(ctx context.Context, in *grpc.SetMerchantS3AgreementRequest, opts ...client.CallOption) (*grpc.GetMerchantOnboardingCompleteDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetMerchantOnboardingCompleteDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetMerchantS3AgreementRequest, ...client.CallOption) *grpc.GetMerchantOnboardingCompleteDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetMerchantOnboardingCompleteDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetMerchantS3AgreementRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantPaymentMethod(ctx context.Context, in *grpc.GetMerchantPaymentMethodRequest, opts ...client.CallOption) (*grpc.GetMerchantPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetMerchantPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetMerchantPaymentMethodRequest, ...client.CallOption) *grpc.GetMerchantPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetMerchantPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetMerchantPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantTariffRates provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantTariffRates(ctx context.Context, in *grpc.GetMerchantTariffRatesRequest, opts ...client.CallOption) (*grpc.GetMerchantTariffRatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetMerchantTariffRatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetMerchantTariffRatesRequest, ...client.CallOption) *grpc.GetMerchantTariffRatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetMerchantTariffRatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetMerchantTariffRatesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchantRequest, opts ...client.CallOption) (*grpc.MoneyBackCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MoneyBackCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.MoneyBackCostMerchantRequest, ...client.CallOption) *grpc.MoneyBackCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MoneyBackCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.MoneyBackCostMerchantRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystemRequest, opts ...client.CallOption) (*grpc.MoneyBackCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MoneyBackCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.MoneyBackCostSystemRequest, ...client.CallOption) *grpc.MoneyBackCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MoneyBackCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.MoneyBackCostSystemRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotification provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetNotification(ctx context.Context, in *grpc.GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Notification
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) *billing.Notification); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderPrivate provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetOrderPrivate(ctx context.Context, in *grpc.GetOrderRequest, opts ...client.CallOption) (*grpc.GetOrderPrivateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetOrderPrivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetOrderRequest, ...client.CallOption) *grpc.GetOrderPrivateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetOrderPrivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderPublic provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetOrderPublic(ctx context.Context, in *grpc.GetOrderRequest, opts ...client.CallOption) (*grpc.GetOrderPublicResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetOrderPublicResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetOrderRequest, ...client.CallOption) *grpc.GetOrderPublicResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetOrderPublicResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchantRequest, opts ...client.CallOption) (*grpc.PaymentChannelCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentChannelCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentChannelCostMerchantRequest, ...client.CallOption) *grpc.PaymentChannelCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentChannelCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentChannelCostMerchantRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystemRequest, opts ...client.CallOption) (*grpc.PaymentChannelCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentChannelCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentChannelCostSystemRequest, ...client.CallOption) *grpc.PaymentChannelCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentChannelCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentChannelCostSystemRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentMethodProductionSettings(ctx context.Context, in *grpc.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*grpc.GetPaymentMethodSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetPaymentMethodSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) *grpc.GetPaymentMethodSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetPaymentMethodSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodTestSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentMethodTestSettings(ctx context.Context, in *grpc.GetPaymentMethodSettingsRequest, opts ...client.CallOption) (*grpc.GetPaymentMethodSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetPaymentMethodSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) *grpc.GetPaymentMethodSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetPaymentMethodSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetPaymentMethodSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlatforms provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPlatforms(ctx context.Context, in *grpc.ListPlatformsRequest, opts ...client.CallOption) (*grpc.ListPlatformsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListPlatformsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListPlatformsRequest, ...client.CallOption) *grpc.ListPlatformsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListPlatformsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListPlatformsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroup provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroup(ctx context.Context, in *billing.GetPriceGroupRequest, opts ...client.CallOption) (*billing.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetPriceGroupRequest, ...client.CallOption) *billing.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetPriceGroupRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupByCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupByCountry(ctx context.Context, in *grpc.PriceGroupByCountryRequest, opts ...client.CallOption) (*billing.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PriceGroupByCountryRequest, ...client.CallOption) *billing.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PriceGroupByCountryRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupCurrencies provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupCurrencies(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*grpc.PriceGroupCurrenciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PriceGroupCurrenciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *grpc.PriceGroupCurrenciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PriceGroupCurrenciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupCurrencyByRegion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupCurrencyByRegion(ctx context.Context, in *grpc.PriceGroupByRegionRequest, opts ...client.CallOption) (*grpc.PriceGroupCurrenciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PriceGroupCurrenciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PriceGroupByRegionRequest, ...client.CallOption) *grpc.PriceGroupCurrenciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PriceGroupCurrenciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PriceGroupByRegionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroupRecommendedPrice provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroupRecommendedPrice(ctx context.Context, in *grpc.PriceGroupRecommendedPriceRequest, opts ...client.CallOption) (*grpc.PriceGroupRecommendedPriceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PriceGroupRecommendedPriceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PriceGroupRecommendedPriceRequest, ...client.CallOption) *grpc.PriceGroupRecommendedPriceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PriceGroupRecommendedPriceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PriceGroupRecommendedPriceRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProduct(ctx context.Context, in *grpc.RequestProduct, opts ...client.CallOption) (*grpc.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.Product
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) *grpc.Product); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPrices provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProductPrices(ctx context.Context, in *grpc.RequestProduct, opts ...client.CallOption) (*grpc.ProductPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ProductPricesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) *grpc.ProductPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ProductPricesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProductsForOrder(ctx context.Context, in *grpc.GetProductsForOrderRequest, opts ...client.CallOption) (*grpc.ListProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetProductsForOrderRequest, ...client.CallOption) *grpc.ListProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetProductsForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProject(ctx context.Context, in *grpc.GetProjectRequest, opts ...client.CallOption) (*grpc.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) *grpc.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefund provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRefund(ctx context.Context, in *grpc.GetRefundRequest, opts ...client.CallOption) (*grpc.CreateRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateRefundResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetRefundRequest, ...client.CallOption) *grpc.CreateRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateRefundResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetRefundRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetUserProfile(ctx context.Context, in *grpc.GetUserProfileRequest, opts ...client.CallOption) (*grpc.GetUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetUserProfileRequest, ...client.CallOption) *grpc.GetUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetUserProfileRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatReportTransactions provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetVatReportTransactions(ctx context.Context, in *grpc.VatTransactionsRequest, opts ...client.CallOption) (*grpc.TransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.TransactionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.VatTransactionsRequest, ...client.CallOption) *grpc.TransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.TransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.VatTransactionsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatReportsDashboard provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetVatReportsDashboard(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*grpc.VatReportsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.VatReportsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *grpc.VatReportsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.VatReportsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVatReportsForCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetVatReportsForCountry(ctx context.Context, in *grpc.VatReportsRequest, opts ...client.CallOption) (*grpc.VatReportsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.VatReportsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.VatReportsRequest, ...client.CallOption) *grpc.VatReportsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.VatReportsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.VatReportsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrderCanBePaying provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) IsOrderCanBePaying(ctx context.Context, in *grpc.IsOrderCanBePayingRequest, opts ...client.CallOption) (*grpc.IsOrderCanBePayingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.IsOrderCanBePayingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.IsOrderCanBePayingRequest, ...client.CallOption) *grpc.IsOrderCanBePayingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.IsOrderCanBePayingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.IsOrderCanBePayingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchantPaymentMethods provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListMerchantPaymentMethods(ctx context.Context, in *grpc.ListMerchantPaymentMethodsRequest, opts ...client.CallOption) (*grpc.ListingMerchantPaymentMethod, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListingMerchantPaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListMerchantPaymentMethodsRequest, ...client.CallOption) *grpc.ListingMerchantPaymentMethod); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListingMerchantPaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListMerchantPaymentMethodsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchants provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListMerchants(ctx context.Context, in *grpc.MerchantListingRequest, opts ...client.CallOption) (*grpc.MerchantListingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MerchantListingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.MerchantListingRequest, ...client.CallOption) *grpc.MerchantListingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MerchantListingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.MerchantListingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotifications provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListNotifications(ctx context.Context, in *grpc.ListingNotificationRequest, opts ...client.CallOption) (*grpc.Notifications, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.Notifications
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListingNotificationRequest, ...client.CallOption) *grpc.Notifications); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Notifications)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListingNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListProducts(ctx context.Context, in *grpc.ListProductsRequest, opts ...client.CallOption) (*grpc.ListProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListProductsRequest, ...client.CallOption) *grpc.ListProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListProductsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListProjects(ctx context.Context, in *grpc.ListProjectsRequest, opts ...client.CallOption) (*grpc.ListProjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListProjectsRequest, ...client.CallOption) *grpc.ListProjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListProjectsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRefunds provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListRefunds(ctx context.Context, in *grpc.ListRefundsRequest, opts ...client.CallOption) (*grpc.ListRefundsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListRefundsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListRefundsRequest, ...client.CallOption) *grpc.ListRefundsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListRefundsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListRefundsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoyaltyReportOrders provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListRoyaltyReportOrders(ctx context.Context, in *grpc.ListRoyaltyReportOrdersRequest, opts ...client.CallOption) (*grpc.TransactionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.TransactionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListRoyaltyReportOrdersRequest, ...client.CallOption) *grpc.TransactionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.TransactionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListRoyaltyReportOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoyaltyReports provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListRoyaltyReports(ctx context.Context, in *grpc.ListRoyaltyReportsRequest, opts ...client.CallOption) (*grpc.ListRoyaltyReportsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListRoyaltyReportsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListRoyaltyReportsRequest, ...client.CallOption) *grpc.ListRoyaltyReportsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListRoyaltyReportsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListRoyaltyReportsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkNotificationAsRead provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) MarkNotificationAsRead(ctx context.Context, in *grpc.GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Notification
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) *billing.Notification); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MerchantReviewRoyaltyReport provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) MerchantReviewRoyaltyReport(ctx context.Context, in *grpc.MerchantReviewRoyaltyReportRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.MerchantReviewRoyaltyReportRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.MerchantReviewRoyaltyReportRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderCreateProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) OrderCreateProcess(ctx context.Context, in *billing.OrderCreateRequest, opts ...client.CallOption) (*grpc.OrderCreateProcessResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.OrderCreateProcessResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.OrderCreateRequest, ...client.CallOption) *grpc.OrderCreateProcessResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.OrderCreateProcessResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.OrderCreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCallbackProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentCallbackProcess(ctx context.Context, in *grpc.PaymentNotifyRequest, opts ...client.CallOption) (*grpc.PaymentNotifyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentNotifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentNotifyRequest, ...client.CallOption) *grpc.PaymentNotifyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentNotifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCreateProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentCreateProcess(ctx context.Context, in *grpc.PaymentCreateRequest, opts ...client.CallOption) (*grpc.PaymentCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentCreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentCreateRequest, ...client.CallOption) *grpc.PaymentCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentCreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentCreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormJsonDataProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormJsonDataProcess(ctx context.Context, in *grpc.PaymentFormJsonDataRequest, opts ...client.CallOption) (*grpc.PaymentFormJsonDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentFormJsonDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentFormJsonDataRequest, ...client.CallOption) *grpc.PaymentFormJsonDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentFormJsonDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentFormJsonDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormLanguageChanged provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormLanguageChanged(ctx context.Context, in *grpc.PaymentFormUserChangeLangRequest, opts ...client.CallOption) (*grpc.PaymentFormDataChangeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentFormDataChangeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentFormUserChangeLangRequest, ...client.CallOption) *grpc.PaymentFormDataChangeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentFormDataChangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentFormUserChangeLangRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormPaymentAccountChanged provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormPaymentAccountChanged(ctx context.Context, in *grpc.PaymentFormUserChangePaymentAccountRequest, opts ...client.CallOption) (*grpc.PaymentFormDataChangeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentFormDataChangeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentFormUserChangePaymentAccountRequest, ...client.CallOption) *grpc.PaymentFormDataChangeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentFormDataChangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentFormUserChangePaymentAccountRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessBillingAddress provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessBillingAddress(ctx context.Context, in *grpc.ProcessBillingAddressRequest, opts ...client.CallOption) (*grpc.ProcessBillingAddressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ProcessBillingAddressResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ProcessBillingAddressRequest, ...client.CallOption) *grpc.ProcessBillingAddressResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ProcessBillingAddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ProcessBillingAddressRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessRefundCallback provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessRefundCallback(ctx context.Context, in *grpc.CallbackRequest, opts ...client.CallOption) (*grpc.PaymentNotifyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentNotifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CallbackRequest, ...client.CallOption) *grpc.PaymentNotifyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentNotifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CallbackRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessVatReports provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessVatReports(ctx context.Context, in *grpc.ProcessVatReportsRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ProcessVatReportsRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ProcessVatReportsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishKeyProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PublishKeyProduct(ctx context.Context, in *grpc.PublishKeyProductRequest, opts ...client.CallOption) (*grpc.KeyProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.KeyProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PublishKeyProductRequest, ...client.CallOption) *grpc.KeyProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.KeyProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PublishKeyProductRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveKeyForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ReserveKeyForOrder(ctx context.Context, in *grpc.PlatformKeyReserveRequest, opts ...client.CallOption) (*grpc.PlatformKeyReserveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PlatformKeyReserveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PlatformKeyReserveRequest, ...client.CallOption) *grpc.PlatformKeyReserveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PlatformKeyReserveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PlatformKeyReserveRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMerchantS3Agreement provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMerchantS3Agreement(ctx context.Context, in *grpc.SetMerchantS3AgreementRequest, opts ...client.CallOption) (*grpc.ChangeMerchantDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeMerchantDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetMerchantS3AgreementRequest, ...client.CallOption) *grpc.ChangeMerchantDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeMerchantDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetMerchantS3AgreementRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMerchantTariffRates provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMerchantTariffRates(ctx context.Context, in *grpc.SetMerchantTariffRatesRequest, opts ...client.CallOption) (*grpc.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetMerchantTariffRatesRequest, ...client.CallOption) *grpc.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetMerchantTariffRatesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMoneyBackCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMoneyBackCostMerchant(ctx context.Context, in *billing.MoneyBackCostMerchant, opts ...client.CallOption) (*grpc.MoneyBackCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MoneyBackCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.MoneyBackCostMerchant, ...client.CallOption) *grpc.MoneyBackCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MoneyBackCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.MoneyBackCostMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMoneyBackCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMoneyBackCostSystem(ctx context.Context, in *billing.MoneyBackCostSystem, opts ...client.CallOption) (*grpc.MoneyBackCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MoneyBackCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.MoneyBackCostSystem, ...client.CallOption) *grpc.MoneyBackCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MoneyBackCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.MoneyBackCostSystem, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPaymentChannelCostMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetPaymentChannelCostMerchant(ctx context.Context, in *billing.PaymentChannelCostMerchant, opts ...client.CallOption) (*grpc.PaymentChannelCostMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentChannelCostMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentChannelCostMerchant, ...client.CallOption) *grpc.PaymentChannelCostMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentChannelCostMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentChannelCostMerchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPaymentChannelCostSystem provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetPaymentChannelCostSystem(ctx context.Context, in *billing.PaymentChannelCostSystem, opts ...client.CallOption) (*grpc.PaymentChannelCostSystemResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentChannelCostSystemResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentChannelCostSystem, ...client.CallOption) *grpc.PaymentChannelCostSystemResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentChannelCostSystemResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentChannelCostSystem, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserNotifyNewRegion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetUserNotifyNewRegion(ctx context.Context, in *grpc.SetUserNotifyRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserNotifySales provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetUserNotifySales(ctx context.Context, in *grpc.SetUserNotifyRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateCountry(ctx context.Context, in *billing.Country, opts ...client.CallOption) (*billing.Country, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Country
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Country, ...client.CallOption) *billing.Country); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Country, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Merchant, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Merchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Order, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Order, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlatformPrices provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdatePlatformPrices(ctx context.Context, in *grpc.AddOrUpdatePlatformPricesRequest, opts ...client.CallOption) (*grpc.UpdatePlatformPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.UpdatePlatformPricesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.AddOrUpdatePlatformPricesRequest, ...client.CallOption) *grpc.UpdatePlatformPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.UpdatePlatformPricesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.AddOrUpdatePlatformPricesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePriceGroup provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdatePriceGroup(ctx context.Context, in *billing.PriceGroup, opts ...client.CallOption) (*billing.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PriceGroup, ...client.CallOption) *billing.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PriceGroup, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductPrices provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateProductPrices(ctx context.Context, in *grpc.UpdateProductPricesRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.UpdateProductPricesRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.UpdateProductPricesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVatReportStatus provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateVatReportStatus(ctx context.Context, in *grpc.UpdateVatReportStatusRequest, opts ...client.CallOption) (*grpc.ResponseError, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ResponseError
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.UpdateVatReportStatusRequest, ...client.CallOption) *grpc.ResponseError); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ResponseError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.UpdateVatReportStatusRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadKeysFile provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UploadKeysFile(ctx context.Context, in *grpc.PlatformKeysFileRequest, opts ...client.CallOption) (*grpc.PlatformKeysFileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PlatformKeysFileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PlatformKeysFileRequest, ...client.CallOption) *grpc.PlatformKeysFileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PlatformKeysFileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PlatformKeysFileRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
